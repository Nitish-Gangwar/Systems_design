#####################################################################
# CS:APP Malloc Lab
# Handout files for students
#
# Copyright (c) 2002, R. Bryant and D. O'Hallaron, All rights reserved.
# May not be used, modified, or copied without permission.
#
######################################################################

***********
Main Files:
***********

mdriver.c	
	The malloc driver that tests your mm.c file

short{1,2}-bal.rep
	Two tiny tracefiles to help you get started. 

Makefile	
	Builds the driver

**********************************
Other support files for the driver
**********************************

config.h	Configures the malloc lab driver
fsecs.{c,h}	Wrapper function for the different timer packages
clock.{c,h}	Routines for accessing the Pentium and Alpha cycle counters
fcyc.{c,h}	Timer functions based on cycle counters
ftimer.{c,h}	Timer functions based on interval timers and gettimeofday()
memlib.{c,h}	Models the heap and sbrk function

*******************************
Building and running the driver
*******************************
To build the driver, type "make" to the shell.

To run the driver on a tiny test trace: (for the naive implementation)

	shell> ./mdriver -V -f traces/short1-bal.rep
	
To run the driver on a tiny test trace: (for the mm1.c)

	shell> ./mdriver1 -V -f traces/short1-bal.rep
	
To run the driver on a tiny test trace: (for the mm2.c)

	shell> ./mdriver2 -V -f traces/short1-bal.rep

The -V option prints out helpful tracing and summary information.

To get a list of the driver flags:

	shell> ./mdriver -h
	
=============================================================================================================
					REPORT FOR THE PROJECT
=============================================================================================================

TEAM_NAME: 203050069+203050102

First member Name: Nitish Gangwar

first member RollNo:203050069

Second member Name: Suhanshu Patel

Second member RollNo: 203050102

mm1.c:

This program's implementation include the best fit approach which saves lot of memory. which is wasted in internal fragmentation.Here we have used two sided coalescing which is achieved by keeping the structure consisting of size,is_free,next and prev pointers for traversing over the doubly linked list.Coalescing is done inside the mm_free function.

mm2.c

This program's implementation include the first fit approach which is faster as compared to mm1.c as once it finds the empty block implementation uses it.Hence as compared to mm1.c this implementation is faster.Rest we are using the two sided coalescing here  too.

mm2.c can also we implemented by keeping separate free_list and filled_list which will be more faster as for searching for the best fit block we just need to search inside the free_list which will result in lesser number of blocks to be searched.Hence faster implementation.



REFERENCES:

https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory
https://moss.cs.iit.edu/cs351/slides/slides-malloc.pdf
http://tharikasblogs.blogspot.com/p/how-to-write-your-own-malloc-and-free.html
https://github.com/HarshTrivedi/malloc/blob/master/mm.c

